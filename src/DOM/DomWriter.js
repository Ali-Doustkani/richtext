import createEditorQueue from './editorQueue'

/**
 * Renders the model to the paragraph and creates new elements surrounding that if needed.
 * @param {HTMLElement} editor The current paragraph that user is typing in.
 * @param {object} model The style model generated by Stylist.
 * If it creates a new editor it will return it otherwise the original paragraph is returned.
 */
function render(editor, model) {
  editor.innerHTML = ''
  const richtext = editor.parentElement
  const queue = createEditorQueue(editor)
  model.forEach(item => queue.editParentOf(item).appendChild(children(item)))
  putToDOM(queue, richtext)
  return queue.createdEditor() ? queue.createdEditor() : editor
}

function children(item) {
  let element
  if (item.effects && item.effects.length) {
    element = item.text
    item.effects.forEach(effect => (element = el(effect).value(element)))
  } else {
    element = el(item.text)
  }
  return element
}

function el(option) {
  if (typeof option === 'string') {
    return document.createTextNode(option)
  }
  const element = document.createElement(option.tag)
  if (option.className) {
    element.setAttribute('class', option.className)
  }
  return {
    value: value => {
      value = typeof value === 'string' ? document.createTextNode(value) : value
      element.appendChild(value)
      return element
    }
  }
}

function putToDOM(queue, richtext) {
  const elements = queue.getQueue()
  for (let i = queue.getParagraphIndex(); i > 0; i--) {
    richtext.insertBefore(elements[i - 1], elements[i])
  }
  for (let i = queue.getParagraphIndex(); i < elements.length - 1; i++) {
    richtext.insertBefore(elements[i + 1], elements[i + 1].nextSibling)
  }
}

export default render
