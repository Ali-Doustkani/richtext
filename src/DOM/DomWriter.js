import createEditorSiblings from './editorSiblings'
import { generateSiblings } from './utils'

/**
 * Renders the model to the editor and creates new elements surround it if needed.
 * @param {HTMLElement} editor The current editor that user is typing in.
 * @param {object} model The style model generated by Stylist.
 * If it creates a new editor it will return it otherwise the original editor is returned.
 */
function render(editor, model) {
  editor.innerHTML = ''
  const richtext = editor.parentElement
  const siblings = createEditorSiblings(editor)
  model.forEach(item => siblings.getEditor(item).appendChild(children(item)))
  generateSiblings(richtext, siblings.siblings(), siblings.mainElementIndex())
  return siblings.createdEditor() ? siblings.createdEditor() : editor
}

function children(item) {
  let element
  if (item.effects && item.effects.length) {
    element = item.text
    item.effects.forEach(effect => (element = el(effect).value(element)))
  } else {
    element = el(item.text)
  }
  return element
}

function el(option) {
  if (typeof option === 'string') {
    return document.createTextNode(option)
  }
  const element = document.createElement(option.tag)
  if (option.className) {
    element.setAttribute('class', option.className)
  }
  return {
    value: value => {
      value = typeof value === 'string' ? document.createTextNode(value) : value
      element.appendChild(value)
      return element
    }
  }
}

export default render
